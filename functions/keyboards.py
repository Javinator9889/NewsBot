import telegram
from telegram.ext.dispatcher import run_async
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import functions.database_manager as db_m
import datetime
import pytz


@run_async
def key_del_prog(bot, update, chat_id, lang, message_id):
    act = db_m.get_time_prog(chat_id)
    print(act)
    if act is None:
        if lang == 'es':
            bot.editMessageText(chat_id=chat_id,
                                text="Todav√≠a no tienes programada ninguna hora... Vuelve m√°s tarde",
                                message_id=message_id)
        else:
            bot.editMessageText(chat_id=chat_id,
                                text="You don't have any schedule yet... Comeback later",
                                message_id=message_id)
    else:
        list_act = act.split(",")
        if len(list_act) < 2:
            print("Inside len < 2")
            if lang == 'es':
                print("lang is 'es'")
                text = "√âstas son actualmente las horas que tienes programadas. Pulsa en una para eliminarla"
                del_all = "Eliminar todo"
            else:
                text = "These are actually your scheduled hours. Press on one for deleting it"
                del_all = "Delete all"
            time = str(list_act[0])
            print("Used time:", time)
            time2 = None
        else:
            if lang == 'es':
                text = "√âstas son actualmente las horas que tienes programadas. Pulsa en una para eliminarla"
                del_all = "Eliminar todo"
            else:
                text = "These are actually your scheduled hours. Press on one for deleting it"
                del_all = "Delete all"
            time = str(list_act[0])
            time2 = str(list_act[1])

        if time2 is not None:
            print("time2 is not None")
            keyboard = [[InlineKeyboardButton(time, callback_data='First'), InlineKeyboardButton(time2, callback_data='Second')],
                        [InlineKeyboardButton(del_all, callback_data='All')]]
        else:
            print("time2 is None")
            keyboard = [[InlineKeyboardButton(time, callback_data='First')]]

        reply_markup = InlineKeyboardMarkup(keyboard)

        bot.editMessageText(chat_id=chat_id, text=text, reply_markup=reply_markup, message_id=message_id)


@run_async
def key_time_prog(bot, update, chat_id, lang, message_id):
    if lang == 'es':
        text = "¬øQu√© quieres actualizar? Elige una opci√≥n"
        button_1 = "Programar üïô"
        button_2 = "Quitar horas üö´"
    else:
        text = "What you want to do? Choose an option"
        button_1 = "Scheduling üïô"
        button_2 = "Delete hoursüö´"

    keyboard = [[InlineKeyboardButton(button_1, callback_data='add_prog'), InlineKeyboardButton(button_2, callback_data='del_prog')]]

    reply_markup = InlineKeyboardMarkup(keyboard)

    bot.editMessageText(chat_id=chat_id, text=text, reply_markup=reply_markup, message_id=message_id)


@run_async
def main_menu(bot, update, chat_id, message_id, lang):
    if lang == 'es':
        pref = "Las preferencias ‚öô"
        busq = "C√≥mo buscar üîç"
        prog = "Programa alertas üîî"
        inline = "Modo \"inline\" üñç"
        basic = "Gu√≠a b√°sica üîñ"
        more = "M√°s..."
    else:
        pref = "The preferences ‚öô"
        busq = "How to search üîç"
        prog = "Setup alerts üîî"
        inline = "\"Inline\" mode üñç"
        basic = "Basic guide üîñ"
        more = "More..."

    keyboard = [[InlineKeyboardButton(basic, callback_data='0'), InlineKeyboardButton(pref, callback_data='2')],
                [InlineKeyboardButton(prog, callback_data='4'), InlineKeyboardButton(inline, callback_data='6')],
                [InlineKeyboardButton(busq, callback_data='5'), InlineKeyboardButton(more, callback_data='more_info')]]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if message_id is None:
        if lang == 'es':
            bot.sendMessage(chat_id=chat_id,
                            text="…¢·¥ú√≠·¥Ä ·¥Ö·¥á ·¥ús·¥è" \
                                 "\n\nHola, bienvenido üòÉ\n\nA continuaci√≥n *tienes una gu√≠a* üìñ para aprender a utilizar este bot:" \
                                 " selecciona üëá las *diferentes opciones* üî¢ y navega por los distintos *men√∫s que aparecer√°n*\n\n" \
                                 "‚ùó_Utiliza_ /help _cuando est√©s haciendo cualquier acci√≥n con el bot para obtener ayuda personalizada_",
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            reply_markup=reply_markup)
        elif lang == 'en':
            bot.sendMessage(chat_id=chat_id,
                            text="·¥ús·¥Ä…¢·¥á …¢·¥ú…™·¥Ö·¥á" \
                                 "\n\nHi, welcome üòÉ\n\nRight now, *you have a guide* üìñ for using this bot:" \
                                 " choose üëá between *different options* üî¢ and go trough *various menus that will appear*\n\n" \
                                 "‚ùó_Use_ /help _when you are doing something with the bot to get personalized help_",
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            reply_markup=reply_markup)
    else:
        if lang == 'es':
            bot.editMessageText(chat_id=chat_id,
                                text="…¢·¥ú√≠·¥Ä ·¥Ö·¥á ·¥ús·¥è" \
                                     "\n\nHola, bienvenido üòÉ\n\nA continuaci√≥n *tienes una gu√≠a* üìñ para aprender a utilizar este bot:" \
                                     " selecciona üëá las *diferentes opciones* üî¢ y navega por los distintos *men√∫s que aparecer√°n*\n\n" \
                                     "‚ùó_Utiliza_ /help _cuando est√©s haciendo cualquier acci√≥n con el bot para obtener ayuda personalizada_",
                                parse_mode=telegram.ParseMode.MARKDOWN,
                                reply_markup=reply_markup,
                                message_id=message_id)
        elif lang == 'en':
            bot.editMessageText(chat_id=chat_id,
                                text="·¥ús·¥Ä…¢·¥á …¢·¥ú…™·¥Ö·¥á" \
                                     "\n\nHi, welcome üòÉ\n\nRight now, *you have a guide* üìñ for using this bot:" \
                                     " choose üëá between *different options* üî¢ and go trough *various menus that will appear*\n\n" \
                                     "‚ùó_Use_ /help _when you are doing something with the bot to get personalized help_",
                                parse_mode=telegram.ParseMode.MARKDOWN,
                                reply_markup=reply_markup,
                                message_id=message_id)
    return "OK"


@run_async
def key_tz(bot, update, chat_id):
    lang = db_m.read_lang(chat_id)
    tz = db_m.get_time_diff(chat_id)
    now = datetime.datetime.now(pytz.timezone(tz)).strftime("%H:%M")

    if lang == 'es':
        ys = "S√≠ üëç"
        no = "No üò∞"
    else:
        ys = "Yes üëç"
        no = "No üò∞"

    keyboard = [[InlineKeyboardButton(ys, callback_data='yes'), InlineKeyboardButton(no, callback_data='no')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if lang == 'es':
        bot.sendMessage(chat_id=chat_id,
                        text="¬øSon las "+now+" d√≥nde vives?",
                        reply_markup=reply_markup)
    else:
        bot.sendMessage(chat_id=chat_id,
                        text="Is "+now+" where you are living?",
                        reply_markup=reply_markup)


@run_async
def key_more(bot, update, chat_id, message_id, lang):
    if lang == 'es':
        apo = "Apoya el proyecto üåü"
        bck = "‚¨Ö Atr√°s"
        share = "¬°Comparte! üó£"
        vid = "Ver el v√≠deo üëÅ"
        gui = "Gu√≠a completa üîñ"
        iq = "share es"
    else:
        apo = "Support the project üåü"
        bck = "‚¨Ö Back"
        share = "Share! üó£"
        vid = "Watch video üëÅ"
        gui = "Complete guide üîñ"
        iq = "share en"
    url = 'https://storebot.me/bot/googlnews_bot'
    yt_url = 'https://youtube.com/'
    gui_url = 'https://wordpress.com'

    keyboard = [[InlineKeyboardButton(apo, url=url), InlineKeyboardButton(vid, url=yt_url)],
                [InlineKeyboardButton(gui, url=gui_url), InlineKeyboardButton(share, switch_inline_query=iq)],
                [InlineKeyboardButton(bck, callback_data='1')]]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if lang == 'es':
        bot.editMessageText(chat_id=chat_id,
                            text="Muchas gracias por *utilizame* y haber *llegado hasta aqu√≠* üòÑ Esta parte es solo para" \
                            " _promocionar este bot_ üåü: he hecho un *gran esfuerzo* y le he dedicado mucho mucho tiempo" \
                            " para que *uses lo que est√°s utilizando hoy*.\n\nAqu√≠ abajo tienes unos botones donde" \
                            " podr√°s *puntuar el bot* üåü, ver üëÅ el [video promocional pulsando sobre la miniatura]("+yt_url+")" \
                            ", *compartir el bot üó£* y acceder a *la gu√≠a completa üîñ* en _WordPress_",
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            message_id=message_id,
                            reply_markup=reply_markup)
    else:
        bot.editMessageText(chat_id=chat_id,
                            text="Thank you so much for *using me* and *have come here* üòÑ This part is only for" \
                            " _promoting this bot_ üåü: I did a *big effort*and this bot *took me so much time*" \
                            " in order to you to *use what you are using today*.\n\nRight here, below, you have buttons" \
                            " where you will be able to *rate the bot* üåü, see üëÅ the [promotional video pressing on thumbnail]("+yt_url+")" \
                            ", *share the bot üó£* and access to the *complete guide üîñ* in _WordPress_",
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            message_id=message_id,
                            reply_markup=reply_markup)


@run_async
def key_guide(bot, update, chat_id, message_id, lang):
    if lang == 'es':
        bck = "‚¨Ö Atr√°s"
    else:
        bck = "‚¨Ö Back"

    keyboard = [[InlineKeyboardButton(bck, callback_data="1")]]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if lang == 'es':
        bot.editMessageText(chat_id=chat_id,
                            text="…¢·¥ú√≠·¥Ä  ô√°s…™·¥Ñ·¥Ä" \
                            "\n\n*1.* Usa /start para recopilar *las √∫ltimas noticias* üìà en base a tus preferencias" \
                            "\n*2.* Env√≠ame palabras clave y *buscar√© los mejores resultados* üåü" \
                            "\n*3.* Config√∫rame a tu gusto en /preferences, pudiendo incluso *programarme üìÜ" \
                            " unas horas* para mandarte art√≠culos" \
                            "\n*4.* Revisa las *pol√≠ticas de privacidad* üëÆ en /privacy",
                            message_id=message_id,
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            reply_markup=reply_markup)
    else:
        bot.editMessageText(chat_id=chat_id,
                            text=" ô·¥Äs…™·¥Ñ …¢·¥ú…™·¥Ö·¥á" \
                                 "\n\n*1.* Use /start for fetching *latest news* üìà based on your preferences" \
                                 "\n*2.* Send me *keywords* and I will look for the best results üåü" \
                                 "\n*3.* Set me up with your *interests* in /preferences, being able also " \
                                 "to set *a schedule* üìÜ for sending you articles" \
                                 "\n*4.* Review *privacy policy* üëÆ in /privacy",
                            message_id=message_id,
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            reply_markup=reply_markup)


@run_async
def key_lang(bot, update):
    keyboard = [[InlineKeyboardButton("Espa√±ol üá™üá∏", callback_data='es_1'),
                 InlineKeyboardButton("English üá¨üáß", callback_data='en_1')]]

    reply_markup2 = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(text="Hola, bienvenido üòÑ. Para poder usar mejor este bot, \
_necesito que me digas tu idioma_\n\nHi, welcome üòÑ. In order to offer you a better\
 user experience, _I need to know your language_",
                              parse_mode=telegram.ParseMode.MARKDOWN,
                              reply_markup=reply_markup2)

    return "OK"


@run_async
def key_max(bot, update, chat_id, message_id):
    keyboard = [[InlineKeyboardButton("20", callback_data='20')],
                [InlineKeyboardButton("50", callback_data='50')],
                [InlineKeyboardButton("75", callback_data='75')],
                [InlineKeyboardButton("100", callback_data='100')],
                [InlineKeyboardButton("150", callback_data='150')],
                [InlineKeyboardButton("200", callback_data='200')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    lang = db_m.read_lang(chat_id)

    if lang == 'es':
        bot.editMessageText(chat_id=chat_id,
                            text="Selecciona cu√°ntos resultados quieres que aparezcan *como m√°ximo* (por defecto, este valor se establece en _75_ )",
                            message_id=message_id,
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            reply_markup=reply_markup)
    else:
        bot.editMessageText(chat_id=chat_id,
                            text="Choose how many results would you like to be *at most* (by default, this value is _75_ )",
                            message_id=message_id,
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            reply_markup=reply_markup)
    return "OK"


@run_async
def key_two(bot, update, chat_id, lang, message_id):
    if lang == 'es':
        next1 = "Siguiente ‚û°"
        text = "·¥ò Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ…™·¥Äs\n\n*Cambia tus preferencias* en /preferences ‚öô, a√±adiendo las que quieras _escribi√©ndolas una tras otra, separadas por una coma_ \
        \n`(microsoft,Espa√±a)`.\n\nSi lo que *quieres es eliminarlas* üóë, sencillamente a√±ade \"Eliminar\" seguido del _n√∫mero asignado a la preferencia_" \
                "\n\n`1: microsoft\n2: Espa√±a\n\nEliminar 1,2`\n\nCuando hayas acabado, escribe *Terminado*\n\n`1/2`"
        prev1 = "‚¨Ö Atr√°s"
    else:
        next1 = "Next ‚û°"
        text = "·¥ò Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ·¥ás\n\n*Change your preferences* ‚öô, just adding them _writing one after another, separated by comma_ \
        \n`(microsoft,USA)`.\n\nIf *what you want is deleting them* üóë, type \"Delete\" followed by the _number of the preference_\
 \n\n`1: microsoft\n2: USA\n\nDelete 1,2`\n\nWhen you have finished, write *Done*\n\n`1/2`"
        prev1 = "‚¨Ö Previously"

    keyboard = [[InlineKeyboardButton(prev1, callback_data="1"), InlineKeyboardButton(next1, callback_data="3")]]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if message_id is not None:
        bot.editMessageText(chat_id=chat_id,
                            text=text,
                            message_id=message_id,
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            reply_markup=reply_markup)
    else:
        bot.sendMessage(chat_id=chat_id, text=text, parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=reply_markup)
    return "OK"


@run_async
def key_three(bot, update, chat_id, lang, message_id):
    if lang == 'es':
        nextb = "Men√∫ principal üìã"
        text = "·¥ò Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ…™·¥Äs\n\n_Prioriza y restringe p√°ginas en tus preferencias:_\
        \n*1. Priorizar*‚Äº: `android ABC`\n*2. Restringir* ‚õî: `econom√≠a -elpais`\
        \n\n_(el nombre de la p√°gina web debe ir todo junto cuando restringes)_\n\n`2/2`"
        prev1 = "‚¨Ö Anterior"
    else:
        nextb = "Main menu üìã"
        text = "·¥ò Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ·¥ás\n\n_Prioritize and limit web-pages in your preferences:_\
        \n*1. Prioritize*‚Äº: `windows New York Times`\n*2. Restrict* ‚õî: `economy -reuters`\
        \n\n_(web-page must go together while limiting results)_\n\n`2/2`"
        prev1 = "‚¨Ö Previously"
    keyboard = [[InlineKeyboardButton(prev1, callback_data="2"), InlineKeyboardButton(nextb, callback_data="1")]]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if message_id is not None:
        bot.editMessageText(chat_id=chat_id,
                            text=text,
                            message_id=message_id,
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            reply_markup=reply_markup)
    else:
        bot.sendMessage(chat_id, text, parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=reply_markup)
    return "OK"


@run_async
def key_four(bot, update, chat_id, lang, message_id):
    if lang == 'es':
        nxt = "Un d√≠a a la semana üìÜ"
        text = "·¥ò Ä·¥è…¢ Ä·¥Ä·¥ç·¥Ä·¥Ñ…™√≥…¥ - ·¥õ·¥è·¥Ö·¥ès  ü·¥ès ·¥Ö√≠·¥Äs\n\nEscribe la *hora y los minutos* para todos los d√≠as\n\n`(HH:MM) - (12:15,9:30PM)`"
        prev1 = "‚¨Ö Anterior"
    else:
        nxt = "Once a week üìÜ"
        text = "s·¥Ñ ú·¥á·¥Ö·¥ú ü…™…¥…¢ - ·¥á·¥†·¥á Ä è ·¥Ö·¥Ä è\n\nWrite the *hour and minutes* for everyday \n\n`(HH:MM) - (12:15,9:30PM)`"
        prev1 = "‚¨Ö Previously"
    keyboard = [[InlineKeyboardButton(prev1, callback_data="1"), InlineKeyboardButton(nxt, callback_data="4_2")]]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if message_id is not None:
        bot.editMessageText(chat_id=chat_id,
                            text=text,
                            message_id=message_id,
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            reply_markup=reply_markup)
    else:
        bot.sendMessage(chat_id, text, parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=reply_markup)
    return "OK"


@run_async
def key_four_two(bot, update, chat_id, lang, message_id):
    if lang == 'es':
        prev1 = "‚¨Ö Anterior"
        text = "·¥ò Ä·¥è…¢ Ä·¥Ä·¥ç·¥Ä·¥Ñ…™√≥…¥ - ·¥ú…¥·¥Ä ·¥†·¥á·¥¢ ·¥Ä  ü·¥Ä s·¥á·¥ç·¥Ä…¥·¥Ä\n\
        \nEscribe *la hora, los minutos y las tres primeras letras del d√≠a* para una vez a la semana üìÖ\
        \n\n`(HH:MM dom) - (15:40 mar,7:10am jue)`"
        nextb = "Men√∫ principal üìã"
    else:
        nextb = "Main Menu üìã"
        text = "s·¥Ñ ú·¥á·¥Ö·¥ú ü…™…¥…¢ - ·¥è…¥·¥Ñ·¥á ·¥Ä ·¥°·¥á·¥á·¥ã\n\
        \nWrite *hour, minutes and day first three letters* for once a week üìÖ\
        \n\n`(HH:MM Sun) - (15:40 tue,7:10am thu)`"
        prev1 = "‚¨Ö Previously"

    keyboard = [[InlineKeyboardButton(prev1, callback_data="4"), InlineKeyboardButton(nextb, callback_data='1')]]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if message_id is not None:
        bot.editMessageText(chat_id=chat_id,
                            text=text,
                            message_id=message_id,
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            reply_markup=reply_markup)
    else:
        bot.sendMessage(chat_id, text, parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=reply_markup)
    return "OK"


@run_async
def key_five(bot, update, chat_id, lang, message_id):
    if lang == 'es':
        next1 = "Leer m√°s üì∞"
        url = "http://pabloaracil.es/trucos-para-buscar-eficientemente-en-google/"
        text = "…¢·¥ú√≠·¥Ä ·¥Ö·¥á  ô√∫s«´·¥ú·¥á·¥Ö·¥Ä\n\n*Busca noticias directamente* escribiendo y enviando el _t√©rmino que quieras buscar._\
        \n*Prioriza p√°ginas o restr√≠ngelas* de esta manera:\
\n\n*1. Priorizar*‚Äº: `android ABC`\n*2. Restringir* ‚õî: `econom√≠a -elpais`\n\nEl bot utiliza el motor de *b√∫squeda de Google*" \
        ", por lo que puedes leer [aqu√≠](http://pabloaracil.es/trucos-para-buscar-eficientemente-en-google/) algunos *trucos para mejorar tus b√∫squedas*"
        prev1 = "‚¨Ö Anterior"
    else:
        text = "*5. Look for news directly* writing and sending the _search term._\
        \n*Prioritize or limit web pages* like this:\
\n\n*1. Prioritize*‚Äº: `windows New York Times`\n*2. Restrict* ‚õî: `economy -reuters`\n\nThe bot is using *Google search*" \
        ", so you can read [here](http://motto.time.com/4116259/google-search/) some *tricks for improving results*"
        next1 = "Read more üì∞"
        url = "http://motto.time.com/4116259/google-search/"
        prev1 = "‚¨Ö Previously"
    keyboard = [[InlineKeyboardButton(prev1, callback_data="1"), InlineKeyboardButton(next1, url=url)]]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if message_id is not None:
        bot.editMessageText(chat_id=chat_id,
                            text=text,
                            message_id=message_id,
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            reply_markup=reply_markup,
                            disable_web_page_preview=True)
    else:
        bot.sendMessage(chat_id, text, parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=reply_markup)
    return "OK"


@run_async
def key_six(bot, update, chat_id, lang, message_id):
    if lang == 'es':
        next1 = "Gu√≠a de b√∫squedas üîç"
        text = "·¥ç·¥è·¥Ö·¥è \"…™…¥ ü…™…¥·¥á\"\n\n*Busca las √∫ltimas noticias* üîé en cualquier chat escribiendo `@GooglNews_bot es,b√∫squeda`\
        \n\nLos resultados aparecer√°n _en una ventana emergente_ donde podr√°s seleccionar üëá el que quieras\
        \n\n*Puedes priorizar o limitar resultados* como se explica en el apartado de b√∫squedas"
        prev1 = "‚¨Ö Anterior"
    else:
        next1 = "Searching guide üîç"
        text = "\"…™…¥ ü…™…¥·¥á\" ·¥ç·¥è·¥Ö·¥á\n\n*Fetch for the latest news* üîé in every chat typing `@GooglNews_bot en,search-terms`\
        \n\nSearch results will appear in a _pop-up window_ where you will be able to choose üëá the one you prefer\
        \n\n*You can prioritize or limit results* as explained in searching guide"
        prev1 = "‚¨Ö Previously"
    keyboard = [[InlineKeyboardButton(prev1, callback_data='1'), InlineKeyboardButton(next1, callback_data='5')]]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if message_id is not None:
        bot.editMessageText(chat_id=chat_id,
                            text=text,
                            message_id=message_id,
                            parse_mode=telegram.ParseMode.MARKDOWN,
                            reply_markup=reply_markup)
    else:
        bot.sendMessage(chat_id, text, parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=reply_markup)
    return "OK"


@run_async
def key_pref(bot, update, chat_id, message_id):
    lang = db_m.read_lang(chat_id)
    if lang == 'es':
        tec = "Tecnolog√≠a üíæ"
        soc = "Sociedad üë•"
        eco = "Econom√≠a üí∞"
        inr = "Internacional üåç"
        dep = "Deporte üèà"
        cul = "Cultura üé≠"
        done = "Terminado"
    else:
        tec = "Technology üíæ"
        soc = "Society üë•"
        eco = "Economy üí∞"
        inr = "International üåç"
        dep = "Sports üèà"
        cul = "Culture üé≠"
        done = "Done"
    keyboard = [[InlineKeyboardButton(tec, callback_data='tec'), InlineKeyboardButton(soc, callback_data='soc')],
                [InlineKeyboardButton(eco, callback_data='eco'), InlineKeyboardButton(inr, callback_data='inr')],
                [InlineKeyboardButton(dep, callback_data='dep'), InlineKeyboardButton(cul, callback_data='cul')],
                [InlineKeyboardButton(done, callback_data="finished")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if message_id is None:
        if lang == 'es':
            bot.sendMessage(chat_id=chat_id,
                            text="Perfecto üòÑ\
\nLa configuraci√≥n inicial est√° casi. Solo falta que definas algunas preferencias para buscar art√≠culos. Pulsa *\"Terminado\"* cuando hayas acabado",
                            reply_markup=reply_markup,
                            parse_mode=telegram.ParseMode.MARKDOWN)
        else:
            bot.sendMessage(chat_id=chat_id,
                            text="Perfect üòÑ\
\nThe initial setup is already done. Just define some preferences for searching articles. Press on *\"Done\"* when you have finished",
                            reply_markup=reply_markup,
                            parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        if lang == 'es':
            bot.editMessageText(chat_id=chat_id,
                                text="Pulsa en \"Terminado\" para acabar",
                                message_id=message_id,
                                reply_markup=reply_markup)
        else:
            bot.editMessageText(chat_id=chat_id,
                                text="Press on \"Done\" to finish",
                                message_id=message_id,
                                reply_markup=reply_markup)

    return "OK"


@run_async
def key_cul(bot, update, chat_id, message_id):
    lang = db_m.read_lang(chat_id)
    pref = db_m.get_pref(chat_id)
    if lang == 'es':
        if pref is not None and 'm√∫sica artista' in pref:
            win = "M√∫sica ‚úî"
            cb1 = '6_m√∫sica artista'
        else:
            win = "M√∫sica ‚ùå"
            cb1 = '6_m√∫sica artista'
        if pref is not None and 'cine estrenos' in pref:
            app = "Cine ‚úî"
            cb2 = '6_cine estrenos'
        else:
            app = "Cine ‚ùå"
            cb2 = '6_cine estrenos'
        if pref is not None and 'teatro estrenos' in pref:
            anr = "Teatro ‚úî"
            cb3 = '6_teatro estrenos'
        else:
            anr = "Teatro ‚ùå"
            cb3 = '6_teatro estrenos'
        if pref is not None and 'allintext: "museo" museum' in pref:
            cib = "Museos ‚úî"
            cb4 = '6_allintext: "museo" museum'
        else:
            cib = "Museos ‚ùå"
            cb4 = '6_allintext: "museo" museum'
        if pref is not None and 'danza musica' in pref:
            viv = "Danza ‚úî"
            cb5 = '6_danza musica'
        else:
            viv = "Danza ‚ùå"
            cb5 = '6_danza musica'
        back = "‚¨Ö Atr√°s"
    else:
        if pref is not None and 'music artist' in pref:
            win = "Music ‚úî"
            cb1 = '6_music artist'
        else:
            win = "Music ‚ùå"
            cb1 = '6_music artist'
        if pref is not None and 'cinema hits' in pref:
            app = "Movies ‚úî"
            cb2 = '6_cinema hits'
        else:
            app = "Movies ‚ùå"
            cb2 = '6_cinema hits'
        if pref is not None and 'theatre hits' in pref:
            anr = "Theatre ‚úî"
            cb3 = '6_theatre hits'
        else:
            anr = "Theatre ‚ùå"
            cb3 = '6_theatre hits'
        if pref is not None and 'museum discoveries' in pref:
            cib = "Museums ‚úî"
            cb4 = '6_museum discoveries'
        else:
            cib = "Museums ‚ùå"
            cb4 = '6_museum discoveries'
        if pref is not None and 'dancing music' in pref:
            viv = "Dancing ‚úî"
            cb5 = '6_dancing music'
        else:
            viv = "Dancing ‚ùå"
            cb5 = '6_dancing music'
        back = "‚¨Ö Back"

    if lang == 'es':
        keyboard = [[InlineKeyboardButton(win, callback_data=cb1), InlineKeyboardButton(app, callback_data=cb2)],
                    [InlineKeyboardButton(anr, callback_data=cb3), InlineKeyboardButton(cib, callback_data=cb4)],
                    [InlineKeyboardButton(viv, callback_data=cb5), InlineKeyboardButton(back, callback_data="Back")]]
    else:
        keyboard = [[InlineKeyboardButton(win, callback_data=cb1), InlineKeyboardButton(app, callback_data=cb2)],
                    [InlineKeyboardButton(anr, callback_data=cb3), InlineKeyboardButton(cib, callback_data=cb4)],
                    [InlineKeyboardButton(viv, callback_data=cb5), InlineKeyboardButton(back, callback_data="Back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if lang == 'es':
        bot.editMessageText(chat_id=chat_id, text="Seleccionando las preferencias sobre *Deportes*",
                            message_id=message_id, reply_markup=reply_markup, parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        bot.editMessageText(chat_id=chat_id, text="Choosing preferences about *Sports*",
                            message_id=message_id, reply_markup=reply_markup, parse_mode=telegram.ParseMode.MARKDOWN)


@run_async
def key_dep(bot, update, chat_id, message_id):
    lang = db_m.read_lang(chat_id)
    pref = db_m.get_pref(chat_id)
    if lang == 'es':
        if pref is not None and 'f√∫tbol' in pref:
            win = "F√∫tbol ‚úî"
            cb1 = '5_f√∫tbol'
        else:
            win = "F√∫tbol ‚ùå"
            cb1 = '5_f√∫tbol'
        if pref is not None and 'baloncesto' in pref:
            app = "Baloncesto ‚úî"
            cb2 = '5_baloncesto'
        else:
            app = "Baloncesto ‚ùå"
            cb2 = '5_baloncesto'
        if pref is not None and 'ciclismo' in pref:
            anr = "Ciclismo ‚úî"
            cb3 = '5_ciclismo'
        else:
            anr = "Ciclismo ‚ùå"
            cb3 = '5_ciclismo'
        if pref is not None and 'formula1' in pref:
            cib = "F√≥rmula 1 ‚úî"
            cb4 = '5_formula1'
        else:
            cib = "F√≥rmula 1 ‚ùå"
            cb4 = '5_formula1'
        if pref is not None and 'motogp' in pref:
            viv = "MotoGP ‚úî"
            cb5 = '5_motogp'
        else:
            viv = "MotoGP ‚ùå"
            cb5 = '5_motogp'
        back = "‚¨Ö Atr√°s"
    else:
        if pref is not None and 'football' in pref:
            win = "Football ‚úî"
            cb1 = '5_football'
        else:
            win = "Football ‚ùå"
            cb1 = '5_football'
        if pref is not None and 'basketball' in pref:
            app = "Basketball ‚úî"
            cb2 = '5_basketball'
        else:
            app = "Basketball ‚ùå"
            cb2 = '5_basketball'
        if pref is not None and 'cycling' in pref:
            anr = "Cycling ‚úî"
            cb3 = '5_cycling'
        else:
            anr = "Cycling ‚ùå"
            cb3 = '5_cycling'
        if pref is not None and 'formula1' in pref:
            cib = "Formula 1 ‚úî"
            cb4 = '5_formula1'
        else:
            cib = "Formula 1 ‚ùå"
            cb4 = '5_formula1'
        if pref is not None and 'motogp' in pref:
            viv = "MotoGP ‚úî"
            cb5 = '5_motogp'
        else:
            viv = "MotoGP ‚ùå"
            cb5 = '5_motogp'
        back = "‚¨Ö Back"

    if lang == 'es':
        keyboard = [[InlineKeyboardButton(win, callback_data=cb1), InlineKeyboardButton(app, callback_data=cb2)],
                    [InlineKeyboardButton(anr, callback_data=cb3), InlineKeyboardButton(cib, callback_data=cb4)],
                    [InlineKeyboardButton(viv, callback_data=cb5), InlineKeyboardButton(back, callback_data="Back")]]
    else:
        keyboard = [[InlineKeyboardButton(win, callback_data=cb1), InlineKeyboardButton(app, callback_data=cb2)],
                    [InlineKeyboardButton(anr, callback_data=cb3), InlineKeyboardButton(cib, callback_data=cb4)],
                    [InlineKeyboardButton(viv, callback_data=cb5), InlineKeyboardButton(back, callback_data="Back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if lang == 'es':
        bot.editMessageText(chat_id=chat_id, text="Seleccionando las preferencias sobre *Deportes*",
                            message_id=message_id, reply_markup=reply_markup, parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        bot.editMessageText(chat_id=chat_id, text="Choosing preferences about *Sports*",
                            message_id=message_id, reply_markup=reply_markup, parse_mode=telegram.ParseMode.MARKDOWN)


@run_async
def key_int(bot, update, chat_id, message_id):
    lang = db_m.read_lang(chat_id)
    pref = db_m.get_pref(chat_id)
    if lang == 'es':
        if pref is not None and 'noticias' in pref:
            win = "Noticias generales ‚úî"
            cb1 = '4_noticias'
        else:
            win = "Noticias generales ‚ùå"
            cb1 = '4_noticias'
        if pref is not None and 'UE union europea' in pref:
            app = "Uni√≥n Europea ‚úî"
            cb2 = '4_UE union europea'
        else:
            app = "Uni√≥n Europea ‚ùå"
            cb2 = '4_UE union europea'
        if pref is not None and 'america noticias news' in pref:
            anr = "Am√©rica ‚úî"
            cb3 = '4_america noticias news'
        else:
            anr = "Am√©rica ‚ùå"
            cb3 = '4_america noticias news'
        if pref is not None and 'noticias asia' in pref:
            cib = "Asia ‚úî"
            cb4 = '4_noticias asia'
        else:
            cib = "Asia ‚ùå"
            cb4 = '4_noticias asia'
        back = "‚¨Ö Atr√°s"
    else:
        if pref is not None and 'international news' in pref:
            win = "General News ‚úî"
            cb1 = '4_international news'
        else:
            win = "General News ‚ùå"
            cb1 = '4_international news'
        if pref is not None and 'european union' in pref:
            app = "European Union ‚úî"
            cb2 = '4_european union'
        else:
            app = "European Union ‚ùå"
            cb2 = '4_european union'
        if pref is not None and 'news america' in pref:
            anr = "America ‚úî"
            cb3 = '4_news america'
        else:
            anr = "America ‚ùå"
            cb3 = '4_news america'
        if pref is not None and 'noticias asia' in pref:
            cib = "Asia ‚úî"
            cb4 = '4_news asia'
        else:
            cib = "Asia ‚ùå"
            cb4 = '4_news asia'
        back = "‚¨Ö Back"

    keyboard = [[InlineKeyboardButton(win, callback_data=cb1), InlineKeyboardButton(app, callback_data=cb2)],
                [InlineKeyboardButton(anr, callback_data=cb3), InlineKeyboardButton(cib, callback_data=cb4)],
                [InlineKeyboardButton(back, callback_data="Back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if lang == 'es':
        bot.editMessageText(chat_id=chat_id, text="Seleccionando las preferencias sobre *Internacional*",
                            message_id=message_id, reply_markup=reply_markup, parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        bot.editMessageText(chat_id=chat_id, text="Choosing preferences about *Internacional*",
                            message_id=message_id, reply_markup=reply_markup, parse_mode=telegram.ParseMode.MARKDOWN)


@run_async
def key_eco(bot, update, chat_id, message_id):
    lang = db_m.read_lang(chat_id)
    pref = db_m.get_pref(chat_id)
    if lang == 'es':
        if pref is not None and 'bancos econom√≠a' in pref:
            win = "Macroeconom√≠a ‚úî"
            cb1 = '3_bancos econom√≠a'
        else:
            win = "Macroeconom√≠a ‚ùå"
            cb1 = '3_bancos econom√≠a'
        if pref is not None and 'empresas compa√±√≠as econom√≠a' in pref:
            app = "Empresas ‚úî"
            cb2 = '3_empresas compa√±√≠as econom√≠a'
        else:
            app = "Empresas ‚ùå"
            cb2 = '3_empresas compa√±√≠as econom√≠a'
        if pref is not None and 'turismo econom√≠a' in pref:
            anr = "Turismo ‚úî"
            cb3 = '3_turismo econom√≠a'
        else:
            anr = "Turismo ‚ùå"
            cb3 = '3_turismo econom√≠a'
        if pref is not None and 'bolsa econom√≠a' in pref:
            cib = "Bolsa ‚úî"
            cb4 = '3_bolsa econom√≠a'
        else:
            cib = "Bolsa ‚ùå"
            cb4 = '3_bolsa econom√≠a'
        if pref is not None and 'vivienda econom√≠a' in pref:
            viv = "Vivienda ‚úî"
            cb5 = '3_vivienda econom√≠a'
        else:
            viv = "Vivienda ‚ùå"
            cb5 = '3_vivienda econom√≠a'
        back = "‚¨Ö Atr√°s"
    else:
        if pref is not None and 'economy banks' in pref:
            win = "Macroeconomy ‚úî"
            cb1 = '3_economy banks'
        else:
            win = "Macroeconomy ‚ùå"
            cb1 = '3_economy banks'
        if pref is not None and 'corporations economy' in pref:
            app = "Enterprises ‚úî"
            cb2 = '3_corporations economy'
        else:
            app = "Enterprises ‚ùå"
            cb2 = '3_corporations economy'
        if pref is not None and 'turism economy' in pref:
            anr = "Turism ‚úî"
            cb3 = '3_turism economy'
        else:
            anr = "Turism ‚ùå"
            cb3 = '3_turism economy'
        if pref is not None and 'stock exchange economy' in pref:
            cib = "Stock Exchange ‚úî"
            cb4 = '3_stock exchange economy'
        else:
            cib = "Stock Exchange ‚ùå"
            cb4 = '3_stock exchange economy'
        if pref is not None and 'housing economy' in pref:
            viv = "Housing ‚úî"
            cb5 = '3_housing economy'
        else:
            viv = "Housing ‚ùå"
            cb5 = '3_housing economy'
        back = "‚¨Ö Back"

    if lang == 'es':
        keyboard = [[InlineKeyboardButton(win, callback_data=cb1), InlineKeyboardButton(app, callback_data=cb2)],
                    [InlineKeyboardButton(anr, callback_data=cb3), InlineKeyboardButton(cib, callback_data=cb4)],
                    [InlineKeyboardButton(viv, callback_data=cb5), InlineKeyboardButton(back, callback_data="Back")]]
    else:
        keyboard = [[InlineKeyboardButton(win, callback_data=cb1), InlineKeyboardButton(app, callback_data=cb2)],
                    [InlineKeyboardButton(anr, callback_data=cb3), InlineKeyboardButton(cib, callback_data=cb4)],
                    [InlineKeyboardButton(viv, callback_data=cb5), InlineKeyboardButton(back, callback_data="Back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if lang == 'es':
        bot.editMessageText(chat_id=chat_id, text="Seleccionando las preferencias sobre *Econom√≠a*",
                            message_id=message_id, reply_markup=reply_markup, parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        bot.editMessageText(chat_id=chat_id, text="Choosing preferences about *Economy*",
                            message_id=message_id, reply_markup=reply_markup, parse_mode=telegram.ParseMode.MARKDOWN)


@run_async
def key_soc(bot, update, chat_id, message_id):
    lang = db_m.read_lang(chat_id)
    pref = db_m.get_pref(chat_id)
    if lang == 'en':
        if pref is not None and 'health discoveries' in pref:
            win = "Health ‚úî"
            cb1 = '2_health discoveries'
        else:
            win = "Health ‚ùå"
            cb1 = '2_health discoveries'
        if pref is not None and 'allintext: "america"' in pref:
            app = "America ‚úî"
            cb2 = '2_allintext: "america"'
        else:
            app = "America ‚ùå"
            cb2 = '2_allintext: "america"'
        if pref is not None and 'law global' in pref:
            anr = "Law ‚úî"
            cb3 = '2_law global'
        else:
            anr = "Law ‚ùå"
            cb3 = '2_law global'
        if pref is not None and 'job contract' in pref:
            cib = "Jobs ‚úî"
            cb4 = '2_job contract'
        else:
            cib = "Jobs ‚ùå"
            cb4 = '2_job contract'
        back = "‚¨Ö Back"
    else:
        if pref is not None and 'salud espa√±a' in pref:
            win = "Salud ‚úî"
            cb1 = '2_salud espa√±a'
        else:
            win = "Salud ‚ùå"
            cb1 = '2_salud espa√±a'
        if pref is not None and 'allintext: "espa√±a"' in pref:
            app = "Espa√±a ‚úî"
            cb2 = '2_allintext: "espa√±a"'
        else:
            app = "Espa√±a ‚ùå"
            cb2 = '2_allintext: "espa√±a"'
        if pref is not None and 'leyes espa√±a' in pref:
            anr = "Legislaci√≥n ‚úî"
            cb3 = '2_leyes espa√±a'
        else:
            anr = "Legislaci√≥n ‚ùå"
            cb3 = '2_leyes espa√±a'
        if pref is not None and 'oposiciones espa√±a' in pref:
            cib = "Oposiciones ‚úî"
            cb4 = '2_oposiciones espa√±a'
        else:
            cib = "Oposiciones ‚ùå"
            cb4 = '2_oposiciones espa√±a'
        if pref is not None and 'empleo espa√±a' in pref:
            goo = "Trabajo ‚úî"
            cb5 = '2_empleo espa√±a'
        else:
            goo = "Trabajo ‚ùå"
            cb5 = '2_empleo espa√±a'
        back = "‚¨Ö Atr√°s"

    if lang == 'es':
        keyboard = [[InlineKeyboardButton(win, callback_data=cb1), InlineKeyboardButton(app, callback_data=cb2)],
                    [InlineKeyboardButton(anr, callback_data=cb3), InlineKeyboardButton(cib, callback_data=cb4)],
                    [InlineKeyboardButton(goo, callback_data=cb5), InlineKeyboardButton(back, callback_data="Back")]]
    else:
        keyboard = [[InlineKeyboardButton(win, callback_data=cb1), InlineKeyboardButton(app, callback_data=cb2)],
                    [InlineKeyboardButton(anr, callback_data=cb3), InlineKeyboardButton(cib, callback_data=cb4)],
                    [InlineKeyboardButton(back, callback_data="Back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if lang == 'es':
        bot.editMessageText(chat_id=chat_id, text="Seleccionando las preferencias sobre *Sociedad*",
                            message_id=message_id, reply_markup=reply_markup, parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        bot.editMessageText(chat_id=chat_id, text="Choosing preferences about *Society*",
                            message_id=message_id, reply_markup=reply_markup, parse_mode=telegram.ParseMode.MARKDOWN)


@run_async
def key_tec(bot, update, chat_id, message_id):
    lang = db_m.read_lang(chat_id)
    pref = db_m.get_pref(chat_id)
    if lang == 'es':
        if pref is not None and 'windows' in pref:
            win = "Windows ‚úî"
            cb1 = "1_windows"
        else:
            win = "Windows ‚ùå"
            cb1 = "1_windows"
        if pref is not None and 'apple' in pref:
            app = "Apple ‚úî"
            cb2 = "1_apple"
        else:
            app = "Apple ‚ùå"
            cb2 = "1_apple"
        if pref is not None and 'android -juegos' in pref:
            anr = "Android ‚úî"
            cb3 = "1_android -juegos"
        else:
            anr = "Android ‚ùå"
            cb3 = "1_android -juegos"
        if pref is not None and 'ciberseguridad' in pref:
            cib = "Ciberseguridad ‚úî"
            cb4 = "1_ciberseguridad"
        else:
            cib = "Ciberseguridad ‚ùå"
            cb4 = "1_ciberseguridad"
        if pref is not None and 'google' in pref:
            goo = "Google ‚úî"
            cb5 = "1_google"
        else:
            goo = "Google ‚ùå"
            cb5 = "1_google"
        if pref is not None and 'nueva tecnolog√≠a' in pref:
            nt = "Invenciones ‚úî"
            cb6 = "1_nueva tecnolog√≠a"
        else:
            nt = "Invenciones ‚ùå"
            cb6 = "1_nueva tecnolog√≠a"
        back = "‚¨Ö Atr√°s"
    else:
        if pref is not None and 'windows' in pref:
            win = "Windows ‚úî"
            cb1 = "1_windows"
        else:
            win = "Windows ‚ùå"
            cb1 = "1_windows"
        if pref is not None and 'apple ios mac phone' in pref:
            app = "Apple ‚úî"
            cb2 = "1_apple ios mac phone"
        else:
            app = "Apple ‚ùå"
            cb2 = "1_apple ios mac phone"
        if pref is not None and 'android -games' in pref:
            anr = "Android ‚úî"
            cb3 = "1_android -games"
        else:
            anr = "Android ‚ùå"
            cb3 = "1_android -games"
        if pref is not None and 'cybersecurity' in pref:
            cib = "Cybersecurity ‚úî"
            cb4 = "1_cybersecurity"
        else:
            cib = "Cybersecurity ‚ùå"
            cb4 = '1_cybersecurity'
        if pref is not None and 'google' in pref:
            goo = "Google ‚úî"
            cb5 = "1_google"
        else:
            goo = "Google ‚ùå"
            cb5 = "1_google"
        if pref is not None and 'new technology inventions' in pref:
            nt = "Inventions ‚úî"
            cb6 = "1_new technology inventions"
        else:
            nt = "Inventions ‚ùå"
            cb6 = "1_new technology inventions"
        back = "‚¨Ö Back"

    keyboard = [[InlineKeyboardButton(win, callback_data=cb1), InlineKeyboardButton(app, callback_data=cb2)],
                [InlineKeyboardButton(anr, callback_data=cb3), InlineKeyboardButton(cib, callback_data=cb4)],
                [InlineKeyboardButton(goo, callback_data=cb5), InlineKeyboardButton(nt, callback_data=cb6)],
                [InlineKeyboardButton(back, callback_data="Back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if lang == 'es':
        bot.editMessageText(chat_id=chat_id, text="Seleccionando las preferencias sobre *Tecnolog√≠a*",
                            message_id=message_id, reply_markup=reply_markup, parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        bot.editMessageText(chat_id=chat_id, text="Choosing preferences about *Technology*",
                            message_id=message_id, reply_markup=reply_markup, parse_mode=telegram.ParseMode.MARKDOWN)
